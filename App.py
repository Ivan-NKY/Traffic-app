#!/usr/bin/env python
# coding: utf-8

# # <font color='#FFB703'>EATC Assignment</font>
# ## Group members:
# 1. Ivan
# 2. Ming xuan

# # <font color='#FFB703'>Importing Libraries</font>

# In[1]:


#Data processing
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import warnings
warnings.filterwarnings('ignore')
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
#Modeling
from sklearn.ensemble import RandomForestClassifier
le = LabelEncoder()
#Application
import streamlit as st
import joblib
import time


# # <font color='#FFB703'>App Development</font>
# To prepare the application for deployment, we split the files into model training and model prediction. This allows for scalability, easier management and mantainence of the application.
# 

# This section covers the development of the Ai-powered application that allows users to make predictions on their traffic by either inputing or uploading files.

# ## Loading the model

# In[2]:


clf = joblib.load("rf_pipeline.pkl") #yeah thats it, take the model from the file generated by the training script and we done
#change this file to a .py: jupyter nbconvert --to python App2.ipynb


# ## Title and interface

# In[3]:


#basic introduction to app
st.markdown("# <font color='#FFB703'>Traffic Anomaly Detection App</font>", unsafe_allow_html=True)
st.write("This app uses a Random Forest model to detect anomalies in traffic data.")
st.write("Upload your traffic data file (CSV format) to make predictions.")


# ### Template for users (compatibility requirements)

# In[4]:


#Template for csv file
st.markdown("### Need a sample CSV template?")
#try catch error handling for file not found
try:
    with open("template.csv", "rb") as file:
        template_bytes = file.read()

    st.download_button(
        label="Download Input Template CSV",
        data=template_bytes,
        file_name="network_traffic_template.csv",
        mime="text/csv"
    )
    st.info("Use this template format to ensure your uploaded data matches the model‚Äôs structure.")

except FileNotFoundError:
    st.warning("‚ö†Ô∏è 'template.csv' not found in your app folder.")


# ### Main program

# In[5]:


# Load trained pipeline
pipeline = joblib.load("rf_pipeline.pkl")

# File uploader
uploaded_file = st.file_uploader("Choose a file", type="csv")

if uploaded_file is not None:
    try:
        # Try reading the CSV
        data = pd.read_csv(uploaded_file)
        
        # Empty file check
        if data.empty or data.shape[0] == 0:
            st.error("‚ùå The uploaded file is empty or contains no rows. Please check your data.")
        else:
            st.write("## Data Preview:")
            st.dataframe(data.head(5))

            try:
                with st.spinner('Processing data...'):
                    time.sleep(1)

                    # --- Column matching step ---
                    expected_columns = pipeline.feature_names_in_
                    missing_cols = set(expected_columns) - set(data.columns)

                    if missing_cols:
                        st.error(f"‚ùå Missing required columns: {missing_cols}")
                        st.info("üí° Tip: Download and use the provided CSV template for correct formatting.")
                    else:
                        # Reorder to match training
                        data_input = data[expected_columns]

                        # Predict
                        predictions = pipeline.predict(data_input)

                        # Add predictions
                        data['predictions'] = predictions
                        data['predictions'] = data['predictions'].apply(lambda x: 'anomaly' if x == 1 else 'normal')

                        st.success('‚úÖ Data processed successfully!')

                        # Chart
                        st.subheader("Count of Anomalies")
                        plt.figure(figsize=(7, 5))
                        sns.countplot(x='predictions', data=data, palette="husl")
                        st.pyplot(plt)

                        # Table
                        st.write("## Predictions:")
                        st.dataframe(data)

                        # Download button
                        csv = data.to_csv(index=False)
                        if st.download_button(label="üì• Download Predictions", 
                                              data=csv, 
                                              file_name='predictions.csv', 
                                              mime='text/csv'):
                            st.toast("Predictions downloaded successfully!", icon="‚úÖ")

            except ValueError as ve:
                st.error(f"‚ùå **Model Prediction Error**: {str(ve)}")
                st.error("This usually means your data doesn't match the expected format.")
            except Exception as pe:
                st.error(f"‚ùå **Prediction Error**: An unexpected error occurred: {str(pe)}")
    
    except pd.errors.EmptyDataError:
        st.error("‚ùå **File Error**: The uploaded file appears to be empty or corrupted.")
    except pd.errors.ParserError as e:
        st.error(f"‚ùå **CSV Format Error**: Unable to parse CSV file. {str(e)}")
    except MemoryError:
        st.error("‚ùå **Memory Error**: The file is too large to process.")
    except Exception as e:
        st.error(f"‚ùå **Unexpected Error**: {str(e)}")
else:
    st.info('üìÅ Please upload a CSV file to begin making predictions.')


# In[ ]:




